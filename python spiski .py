#Списки.
#Дан список чисел, найти:
#сумму всех элементов (реализовать встроенную функцию sum)
a = [1,2,3,4]
b = [2,4,5,6]
c = a+b
summa = (c[0]+c[1]+c[2]+c[3]+c[4]+c[5]+c[6]+c[7])
print (summa)

#максимальный элемент (реализовать встроенную функцию max)

a = [1,2,3,4]
b = [2,4,5,6]
c = a+b
maxi = c[0]
for i in range(1, len(c)):
    if c[i] > maxi:
        maxi = c[i]
print(maxi)

#среднее арифметическое
a = [1,2,3,4]
b = [2,4,5,6]
c = a+b
suma = (c[0]+c[1]+c[2]+c[3]+c[4]+c[5]+c[6]+c[7])
print (suma /len (c))


#медианное значение (указание: предварительно упорядочить c помощью mylist.sort())

#количество нулей (реализовать функцию count, которая повторяет функционал соответствующего метода для списков)

#Дан список слов, найти:
#самое длинное слово
word = ["Кошка", "Ложка","Ножка","Сапог","Радостный"]
max(word,key = len)


#Дано 2 упорядоченных списка. Объединить их 
#в один упорядоченный список. Указание: встроенная функция sort ухудшает алгоритмическую сложность и ее использовать в данной задаче нельзя.
#[1, 5, 9], [2, 5, 13] -> [1, 2, 5, 5, 13]

a = [1, 5, 9]
b = [2, 5, 13]
c = []

N = len(a)
M = len(b)

i = 0
j = 0
while i < N and j < M:
    if a[i] <= b[j]:
        c.append(a[i])
        i += 1
    else:
        c.append(b[j])
        j += 1

c += a[i:] + b[j:]
print(c)

#Реализовать функцию zip: из пары списков сделать список пар:
#zip([1, 2, 3], ['a', 'b', 'c']) -> [(1, 'a'), (2, 'b'), (3, 'c')]

a = ['a', 'b','c','d']
b = [1,2,3,4]
c = {}
for i in range(len(a)):
   c[a[i]] = b[i]
   print(c)
